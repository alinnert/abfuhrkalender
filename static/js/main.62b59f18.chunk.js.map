{"version":3,"sources":["states/litterServiceData.ts","states/calendar.ts","components/LitterIcon.tsx","components/Day.tsx","states/holidays.ts","Calendar.tsx","components/CalendarFallback.tsx","components/Button.tsx","components/ButtonRow.tsx","components/Checkbox.tsx","components/FileInput.tsx","components/SettingsGroup.tsx","components/Settings.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["LitterType","DisplayPage","selectedLitterTypesState","atom","key","default","residual","plastic","paper","bio","litterServiceFileState","litterServiceFileContentState","selector","get","a","file","text","litterServiceDataState","fileContent","summary","litterServiceData","Object","values","ical","parseICS","entry","undefined","start","toDateString","Array","isArray","type","startsWith","problem","push","date","LitterIcon","memo","color","useMemo","className","style","width","height","viewBox","fill","d","Day","isHoliday","litterTypes","selectedLitterTypes","useRecoilValue","litterIcons","filter","litterType","includes","map","getDay","trim","getDate","toLocaleDateString","weekday","defaultYear","Date","getFullYear","yearState","pageMonthsState","selectorFamily","displayPage","first","pageDaysState","monthIndex","dates","getMonth","setDate","monthId","apiUrl","URL","ignoreHolidays","holidaysState","params","URLSearchParams","jahr","String","nur_land","url","toString","fetch","result","json","data","entries","value","datum","holidaysStringState","it","Calendar","page","year","holidays","pageDays","month","gridRow","toLocaleString","dateIndex","CalendarFallback","Theme","Button","children","theme","props","dark","ButtonRow","Checkbox","label","name","checked","onChange","id","FileInput","icon","inputRef","useRef","useState","filename","setFilename","ref","current","files","join","onClick","click","SettingsGroup","title","Settings","useRecoilState","setYear","resetYear","useResetRecoilState","setLitterServiceFile","useSetRecoilState","setSelectedLitterTypes","currentYear","handleSelectedLitterTypeChange","disabled","href","length","item","globalThis","print","App","fallback","second","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","console","log"],"mappings":"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","file":"static/js/main.62b59f18.chunk.js","sourcesContent":["import ical from 'ical'\nimport { atom, selector } from 'recoil'\n\nexport enum LitterType {\n  residual,\n  plastic,\n  paper,\n  bio,\n  problem,\n}\n\nexport interface SimpleLitterServiceEntry {\n  date: Date | null\n  type: LitterType\n}\n\nfunction getLitterType(summary: string): LitterType | null {\n  if (summary.startsWith('Restmüll')) return LitterType.residual\n  if (summary.startsWith('Gelber Sack')) return LitterType.plastic\n  if (summary.startsWith('Papierabfuhr')) return LitterType.paper\n  if (summary.startsWith('Biotonne')) return LitterType.bio\n  if (summary.startsWith('Problemmüll')) return LitterType.problem\n  return null\n}\n\nexport const selectedLitterTypesState = atom<LitterType[]>({\n  key: 'selectedLitterTypesState',\n  default: [\n    LitterType.residual,\n    LitterType.plastic,\n    LitterType.paper,\n    LitterType.bio,\n  ],\n})\n\nexport const litterServiceFileState = atom<File | null>({\n  key: 'litterServiceFileState',\n  default: null,\n})\n\nconst litterServiceFileContentState = selector({\n  key: 'litterServiceFileContentState',\n  get: async ({ get }) => {\n    const file = get(litterServiceFileState)\n    if (file === null) return null\n\n    return await file.text()\n  },\n})\n\nexport const litterServiceDataState = selector({\n  key: 'litterServiceDataState',\n  get: ({ get }): Record<string, SimpleLitterServiceEntry[]> => {\n    const fileContent = get(litterServiceFileContentState)\n    if (fileContent === null) return {}\n\n    const entries = Object.values(ical.parseICS(fileContent))\n    const litterServiceData: Record<string, SimpleLitterServiceEntry[]> = {}\n\n    for (const entry of entries) {\n      if (entry.start === undefined) continue\n      const key = entry.start.toDateString()\n      if (!Array.isArray(litterServiceData[key])) litterServiceData[key] = []\n      if (entry.summary === undefined) continue\n      const type = getLitterType(entry.summary)\n      if (type === null) continue\n      litterServiceData[key].push({ date: entry.start, type })\n    }\n\n    return litterServiceData\n  },\n})\n","import { atom, selectorFamily } from 'recoil'\n\nexport enum DisplayPage {\n  first,\n  second,\n}\n\nconst defaultYear = new Date().getFullYear()\n\n/** The selected year. */\nexport const yearState = atom({ key: 'yearState', default: defaultYear })\n\n/** An array of month indexes that should be displayed on one page. */\nconst pageMonthsState = selectorFamily({\n  key: 'pageMonthsState',\n  get: (displayPage: DisplayPage) => () => {\n    return displayPage === DisplayPage.first\n      ? [0, 1, 2, 3, 4, 5]\n      : [6, 7, 8, 9, 10, 11]\n  },\n})\n\n/** All days to display for a given page. */\nexport const pageDaysState = selectorFamily({\n  key: 'pageDaysState',\n  get: (displayPage: DisplayPage) => ({ get }) => {\n    return get(pageMonthsState(displayPage)).map((monthIndex) => {\n      const dates: Date[] = []\n      const date = new Date(get(yearState), monthIndex)\n\n      while (date.getMonth() === monthIndex) {\n        dates.push(new Date(date))\n        date.setDate(date.getDate() + 1)\n      }\n\n      return { monthId: monthIndex, dates }\n    })\n  },\n})\n","import React, { memo, useMemo } from 'react'\nimport { LitterType } from '../states/litterServiceData'\n\ninterface Props {\n  type: LitterType\n}\n\nexport const LitterIcon = memo(function LitterIcon({ type }: Props) {\n  const color = useMemo(() => {\n    switch (type) {\n      case LitterType.residual:\n        return 'black'\n      case LitterType.plastic:\n        return 'hsl(45, 80%, 50%)'\n      case LitterType.paper:\n        return 'hsl(200, 80%, 50%)'\n      case LitterType.bio:\n        return 'hsl(20, 60%, 40%)'\n      case LitterType.problem:\n        return 'hsl(0, 90%, 50%)'\n    }\n  }, [type])\n\n  return (\n    <div className=\"litter-icon\" style={{ color }}>\n      <svg style={{ width: 24, height: 24 }} viewBox=\"0 0 24 24\">\n        <path\n          fill=\"currentColor\"\n          d=\"M20.37,8.91L19.37,10.64L7.24,3.64L8.24,1.91L11.28,3.66L12.64,3.29L16.97,5.79L17.34,7.16L20.37,8.91M6,19V7H11.07L18,11V19A2,2 0 0,1 16,21H8A2,2 0 0,1 6,19Z\"\n        />\n      </svg>\n    </div>\n  )\n})\n","import React, { useMemo } from 'react'\nimport { useRecoilValue } from 'recoil'\nimport {\n  LitterType,\n  selectedLitterTypesState\n} from '../states/litterServiceData'\nimport './Day.scss'\nimport { LitterIcon } from './LitterIcon'\n\ninterface Props {\n  date: Date\n  isHoliday: boolean\n  litterTypes: LitterType[]\n}\n\nexport function Day({ date, isHoliday, litterTypes }: Props) {\n  const selectedLitterTypes = useRecoilValue(selectedLitterTypesState)\n\n  const litterIcons = useMemo(() => {\n    return litterTypes\n      .filter((litterType) => selectedLitterTypes.includes(litterType))\n      .map((litterType) => <LitterIcon key={litterType} type={litterType} />)\n  }, [litterTypes, selectedLitterTypes])\n\n  return (\n    <div\n      className={`day ${date.getDay() === 0 ? 'day--is-sunday' : ''} ${\n        date.getDay() === 6 ? 'day--is-saturday' : ''\n      } ${isHoliday ? 'day--is-holiday' : ''}`.trim()}\n    >\n      <div className=\"day__number\">{date.getDate()}</div>\n      <div className=\"day__weekday\">\n        {date.toLocaleDateString('default', { weekday: 'short' })}\n      </div>\n      <div className=\"day__litter-icons\">{litterIcons}</div>\n    </div>\n  )\n}\n","import { selector } from 'recoil'\nimport { yearState } from './calendar'\n\nconst apiUrl = new URL('https://feiertage-api.de/api/')\n\nconst ignoreHolidays = ['Augsburger Friedensfest', 'Buß- und Bettag']\n\ninterface HolidayEntry {\n  datum: string\n  hinweis: string\n}\n\nexport const holidaysState = selector({\n  key: 'holidaysState',\n  get: async ({ get }) => {\n    const params = new URLSearchParams({\n      jahr: String(get(yearState)),\n      nur_land: 'by',\n    })\n    const url = `${apiUrl}?${params.toString()}`\n    const result = await fetch(url)\n    const data = (await result.json()) as Record<string, HolidayEntry>\n\n    return Object.entries(data)\n      .filter(([key]) => !ignoreHolidays.includes(key))\n      .map(([, value]) => new Date(value.datum))\n  },\n})\n\nexport const holidaysStringState = selector({\n  key: 'holidaysStringState',\n  get: ({ get }) => {\n    return get(holidaysState).map((it) => it.toDateString())\n  },\n})\n","import React, { Fragment, memo } from 'react'\nimport { useRecoilValue } from 'recoil'\nimport './Calendar.scss'\nimport { Day } from './components/Day'\nimport { DisplayPage, pageDaysState, yearState } from './states/calendar'\nimport { holidaysStringState } from './states/holidays'\nimport { litterServiceDataState } from './states/litterServiceData'\n\ninterface Props {\n  page: DisplayPage\n}\n\nexport const Calendar = memo<Props>(function Calendar({ page }) {\n  const year = useRecoilValue(yearState)\n  const holidays = useRecoilValue(holidaysStringState)\n  const pageDays = useRecoilValue(pageDaysState(page))\n  const litterServiceData = useRecoilValue(litterServiceDataState)\n\n  return (\n    <div className=\"calendar\">\n      <div className=\"calendar__header\">Abfuhrkalender {year}</div>\n\n      <div className=\"calendar__days\">\n        {pageDays.map((month, monthIndex) => (\n          <Fragment key={monthIndex}>\n            <div\n              className=\"calendar__month-name\"\n              style={{ gridRow: String(monthIndex * 2 + 1) }}\n            >\n              {new Date(year, month.monthId).toLocaleString('default', {\n                month: 'long',\n              })}\n            </div>\n\n            {month.dates.map((date, dateIndex) => (\n              <div\n                key={dateIndex}\n                className=\"calendar__day\"\n                style={{ gridRow: String(monthIndex * 2 + 2) }}\n              >\n                <Day\n                  date={date}\n                  isHoliday={holidays.includes(date.toDateString())}\n                  litterTypes={litterServiceData[date.toDateString()]?.map(\n                    (it) => it.type\n                  ) ?? []}\n                />\n              </div>\n            ))}\n          </Fragment>\n        ))}\n      </div>\n    </div>\n  )\n})\n","import React from 'react'\nimport './CalendarFallback.scss'\n\nexport function CalendarFallback() {\n  return (\n    <div className=\"calendar-fallback\">\n      <div className=\"calendar-fallback__indicator\">\n        Kalender wird erstellt...\n      </div>\n    </div>\n  )\n}\n","import React, { ButtonHTMLAttributes } from 'react'\nimport { ChildrenProp } from '../jsx'\nimport './Button.scss'\n\nexport enum Theme {\n  light,\n  dark,\n}\n\ninterface Props extends ChildrenProp, ButtonHTMLAttributes<HTMLButtonElement> {\n  theme?: Theme\n}\n\nexport function Button({ children, theme, ...props }: Props) {\n  return (\n    <button\n      {...props}\n      className={`button ${theme === Theme.dark ? 'button--dark' : ''} ${\n        props.className\n      }`}\n    >\n      {children}\n    </button>\n  )\n}\n","import React from 'react'\nimport { ChildrenProp } from '../jsx'\nimport './ButtonRow.scss'\n\ninterface Props extends ChildrenProp {}\n\nexport function ButtonRow({ children }: Props) {\n  return <div className=\"button-row\">{children}</div>\n}\n","import React from 'react'\nimport './Checkbox.scss'\n\ninterface Props {\n  label: string\n  name: string\n  checked?: boolean\n  onChange?: (checked: boolean) => void\n}\n\nexport function Checkbox({ label, name, checked = false, onChange }: Props) {\n  return (\n    <div className=\"checkbox\">\n      <label className=\"checkbox__label\">\n        <input\n          className=\"checkbox__input\"\n          type=\"checkbox\"\n          name={name}\n          id={name}\n          checked={checked}\n          onChange={() => onChange?.(!checked)}\n        />\n        <span className=\"checkbox__label-text\">{label}</span>\n      </label>\n    </div>\n  )\n}\n","import React, { ReactNode, useRef, useState } from 'react'\nimport { Button } from './Button'\nimport './FileInput.scss'\n\ninterface Props {\n  icon?: ReactNode\n  label: string\n  onChange: (file: FileList | null) => void\n}\n\nexport function FileInput({ icon, label, onChange }: Props) {\n  const inputRef = useRef<HTMLInputElement>(null)\n  const [filename, setFilename] = useState('')\n\n  function handleButtonClick() {\n    if (inputRef.current === null) return\n    inputRef.current.click()\n  }\n\n  function handleInputChange() {\n    if (inputRef.current === null) return\n    onChange(inputRef.current.files)\n    const files = inputRef.current.files\n    setFilename(\n      files === null ? '' : [...files].map((file) => file.name).join(', ')\n    )\n  }\n\n  return (\n    <div className=\"file-input\">\n      <input\n        className=\"file-input__input\"\n        type=\"file\"\n        ref={inputRef}\n        onChange={handleInputChange}\n      />\n\n      <Button className=\"file-input__button\" onClick={handleButtonClick}>\n        <span className=\"file-input__button-icon\">{icon}</span>\n        <span className=\"file-input__button-label\">{label}</span>\n      </Button>\n\n      {filename !== '' ? (\n        <div className=\"file-input__filename\">\n          <strong>Ausgewählte Datei:</strong>\n          <br />\n          {filename}\n        </div>\n      ) : null}\n    </div>\n  )\n}\n","import React from 'react'\nimport { ChildrenProp } from '../jsx'\nimport './SettingsGroup.scss'\n\ninterface Props extends ChildrenProp {\n  title: string\n}\n\nexport function SettingsGroup({ children, title }: Props) {\n  return (\n    <div className=\"settings-group\">\n      <div className=\"settings-group__title\">{title}</div>\n\n      <div className=\"settings-group__content\">{children}</div>\n    </div>\n  )\n}\n","import {\n  ArrowLeftIcon,\n  ArrowRightIcon,\n  FileIcon,\n  InfoCircledIcon\n} from '@modulz/radix-icons'\nimport React, { useMemo } from 'react'\nimport {\n  useRecoilState,\n\n  useResetRecoilState,\n  useSetRecoilState\n} from 'recoil'\nimport { yearState } from '../states/calendar'\nimport {\n  litterServiceFileState,\n  LitterType,\n  selectedLitterTypesState\n} from '../states/litterServiceData'\nimport { Button } from './Button'\nimport { ButtonRow } from './ButtonRow'\nimport { Checkbox } from './Checkbox'\nimport { FileInput } from './FileInput'\nimport './Settings.scss'\nimport { SettingsGroup } from './SettingsGroup'\n\nexport const Settings = function Settings() {\n  const [year, setYear] = useRecoilState(yearState)\n  const resetYear = useResetRecoilState(yearState)\n  const setLitterServiceFile = useSetRecoilState(litterServiceFileState)\n  const [selectedLitterTypes, setSelectedLitterTypes] = useRecoilState(\n    selectedLitterTypesState\n  )\n\n  const currentYear = useMemo(() => new Date().getFullYear(), [])\n\n  function handleFileChange(files: FileList | null) {\n    if (files === null) return\n    if (files.length === 0) return\n    const file = files.item(0)\n    if (file === null) return\n    setLitterServiceFile(file)\n  }\n\n  function handleSelectedLitterTypeChange(litterType: LitterType): void {\n    if (selectedLitterTypes.includes(litterType)) {\n      setSelectedLitterTypes(\n        selectedLitterTypes.filter((type) => type !== litterType)\n      )\n    } else {\n      setSelectedLitterTypes([...selectedLitterTypes, litterType])\n    }\n  }\n\n  return (\n    <div className=\"settings\">\n      <SettingsGroup title={`Jahr: ${year}`}>\n        <ButtonRow>\n          <Button onClick={() => setYear(year - 1)}>\n            <ArrowLeftIcon />\n          </Button>\n          <Button onClick={() => setYear(year + 1)}>\n            <ArrowRightIcon />\n          </Button>\n          <Button disabled={year === currentYear} onClick={resetYear}>\n            Aktuelles Jahr\n          </Button>\n        </ButtonRow>\n      </SettingsGroup>\n\n      <SettingsGroup title=\"Abfuhr-Daten\">\n        <p>\n          <span>Abfuhr-Daten holen:</span>\n          <br />\n          <a href=\"https://www.landkreis-kelheim.de/amt-service/onlineservices/abfallkalender/\">\n            Abfallkalender Landkreis Kelheim\n          </a>\n        </p>\n        <p>Aktuell werden nur iCal-Dateien (*.ics) unterstützt.</p>\n        <FileInput\n          icon={<FileIcon />}\n          label=\"Datei auswählen...\"\n          onChange={handleFileChange}\n        />\n      </SettingsGroup>\n\n      <SettingsGroup title=\"Mülltypen auswählen\">\n        <Checkbox\n          label=\"Restmüll\"\n          name=\"resudial\"\n          checked={selectedLitterTypes.includes(LitterType.residual)}\n          onChange={() => handleSelectedLitterTypeChange(LitterType.residual)}\n        />\n        <Checkbox\n          label=\"Gelber Sack\"\n          name=\"plastic\"\n          checked={selectedLitterTypes.includes(LitterType.plastic)}\n          onChange={() => handleSelectedLitterTypeChange(LitterType.plastic)}\n        />\n        <Checkbox\n          label=\"Papier\"\n          name=\"paper\"\n          checked={selectedLitterTypes.includes(LitterType.paper)}\n          onChange={() => handleSelectedLitterTypeChange(LitterType.paper)}\n        />\n        <Checkbox\n          label=\"Bio\"\n          name=\"bio\"\n          checked={selectedLitterTypes.includes(LitterType.bio)}\n          onChange={() => handleSelectedLitterTypeChange(LitterType.bio)}\n        />\n        <Checkbox\n          label=\"Problemmüll\"\n          name=\"problem\"\n          checked={selectedLitterTypes.includes(LitterType.problem)}\n          onChange={() => handleSelectedLitterTypeChange(LitterType.problem)}\n        />\n      </SettingsGroup>\n\n      <SettingsGroup title=\"Fertig?\">\n        <p>\n          <InfoCircledIcon /> <strong>Tipp</strong><br/>\n          Im Drucken-Dialog:\n        </p>\n        <ul>\n          <li>\n            <em>Hintergrundgrafiken</em> <strong>aktivieren</strong>\n          </li>\n          <li>\n            <em>Kopf- und Fußzeilen</em> <strong>deaktivieren</strong>\n          </li>\n        </ul>\n        <Button onClick={globalThis.print}>Drucken...</Button>\n      </SettingsGroup>\n\n      <SettingsGroup title=\"Über\">\n        <ul>\n          <li>\n            Source Code: <a href=\"https://github.com/alinnert/abfuhrkalender\">GitHub</a>\n          </li>\n          <li>\n            Icons: <a href=\"https://icons.modulz.app/\">Radix Icons</a>\n          </li>\n          <li>\n            Feiertagsdaten: <a href=\"https://feiertage-api.de\">feiertage-api.de</a>\n          </li>\n        </ul>\n      </SettingsGroup>\n    </div>\n  )\n}\n","import React, { Suspense } from 'react'\nimport './App.scss'\nimport { Calendar } from './Calendar'\nimport { CalendarFallback } from './components/CalendarFallback'\nimport { Settings } from './components/Settings'\nimport { DisplayPage } from './states/calendar'\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <div className=\"app__sidebar\">\n        <div className=\"app__title\">Generator für Müllabfuhrkalender</div>\n\n        <div className=\"app__settings\">\n          <Settings />\n        </div>\n      </div>\n\n      <div className=\"app__calendar\">\n        <Suspense fallback={<CalendarFallback />}>\n          <Calendar page={DisplayPage.first} />\n          <Calendar page={DisplayPage.second} />\n        </Suspense>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { RecoilRoot } from 'recoil'\nimport App from './App'\nimport './index.scss'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <App />\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log)\n"],"sourceRoot":""}